
AVRASM ver. 2.2.7  c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm Sun May 13 00:47:21 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(14): Including file 'c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\programcode.asm'
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(15): Including file 'c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\definitions.asm'
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(16): Including file 'c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\dereferencer.asm'
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(17): Including file 'c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\Instructions/LDA.asm'
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(18): Including file 'c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\memorymap.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(14): Including file 'c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\programcode.asm'
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(15): Including file 'c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\definitions.asm'
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(16): Including file 'c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\dereferencer.asm'
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(17): Including file 'c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\Instructions/LDA.asm'
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(18): Including file 'c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\memorymap.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; 6502EMU.asm
                                 ;
                                 ; Created: 5/12/2018 8:00:12 AM
                                 ; Author : ROTP
                                 ;
                                 
                                 start: ;to avoid overwriting the interrupt table with our includes!
000000 940c 0451                 	jmp init
                                 
                                 
000002 0000
000003 0000
000004 0000
000005 0000
000006 0000
000007 0000
000008 0000
000009 0000
c:\users\rotp\Documents\Atmel Studio\7.0\6502EMU\6502EMU\main.asm(12): warning: .cseg .db misalignment - padding zero byte
00000a 0000                      .DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                                 
                                 .include "programcode.asm"
                                 
                                  * programcode.asm
                                  *
                                  *  Created: 5/12/2018 7:09:37 PM
                                  *   Author: ROTP
                                  */ 
                                 
                                 .EQU RAM_SIZE = 2048
                                 .EQU ROM_SIZE = 512
                                 .EQU EEPROM_SIZE = 512
                                 
                                 .CSEG
                                 ;.ORG 0x100
                                 RAMcodeUNLOADED: 
00000b 09a9
00000c dbda
00000d dddc
00000e dddd
00000f dddd
000010 dddd
000011 dddd
000012 dddd
000013 dddd
000014 dddd
000015 dddd
000016 dddd
000017 dddd
000018 dddd
000019 dddd
00001a dddd
00001b dddd
00001c dddd
00001d dddd
00001e dddd
00001f dddd
000020 dddd
000021 dddd
000022 dddd
000023 dddd
000024 dddd
000025 dddd
000026 dddd
000027 dddd
000028 dddd
000029 dddd
00002a dddd
00002b dddd
00002c dddd
00002d dddd
00002e dddd
00002f dddd
000030 dddd
000031 dddd
000032 dddd
000033 dddd
000034 dddd
000035 dddd
000036 dddd
000037 dddd
000038 dddd
000039 dddd
00003a dddd
00003b dddd
00003c dddd
00003d dddd
00003e dddd
00003f dddd
000040 dddd
000041 dddd
000042 dddd
000043 dddd
000044 dddd
000045 dddd
000046 dddd
000047 dddd
000048 dddd
000049 dddd
00004a dddd
00004b dddd
00004c dddd
00004d dddd
00004e dddd
00004f dddd
000050 dddd
000051 dddd
000052 dddd
000053 dddd
000054 dddd
000055 dddd
000056 dddd
000057 dddd
000058 dddd
000059 dddd
00005a dddd
00005b dddd
00005c dddd
00005d dddd
00005e dddd
00005f dddd
000060 dddd
000061 dddd
000062 dddd
000063 dddd
000064 dddd
000065 dddd
000066 dddd
000067 dddd
000068 dddd
000069 dddd
00006a dddd
00006b dddd
00006c dddd
00006d dddd
00006e dddd
00006f dddd
000070 dddd
000071 dddd
000072 dddd
000073 dddd
000074 dddd
000075 dddd
000076 dddd
000077 dddd
000078 dddd
000079 dddd
00007a dddd
00007b dddd
00007c dddd
00007d dddd
00007e dddd
00007f dddd
000080 dddd
000081 dddd
000082 dddd
000083 dddd
000084 dddd
000085 dddd
000086 dddd
000087 dddd
000088 dddd
000089 dddd
00008a dddd
00008b dddd
00008c dddd
00008d dddd
00008e dddd
00008f dddd
000090 dddd
000091 dddd
000092 dddd
000093 dddd
000094 dddd
000095 dddd
000096 dddd
000097 dddd
000098 dddd
000099 dddd
00009a dddd
00009b dddd
00009c dddd
00009d dddd
00009e dddd
00009f dddd
0000a0 dddd
0000a1 dddd
0000a2 dddd
0000a3 dddd
0000a4 dddd
0000a5 dddd
0000a6 dddd
0000a7 dddd
0000a8 dddd
0000a9 dddd
0000aa dddd
0000ab dddd
0000ac dddd
0000ad dddd
0000ae dddd
0000af dddd
0000b0 dddd
0000b1 dddd
0000b2 dddd
0000b3 dddd
0000b4 dddd
0000b5 dddd
0000b6 dddd
0000b7 dddd
0000b8 dddd
0000b9 dddd
0000ba dddd
0000bb dddd
0000bc dddd
0000bd dddd
0000be dddd
0000bf dddd
0000c0 dddd
0000c1 dddd
0000c2 dddd
0000c3 dddd
0000c4 dddd
0000c5 dddd
0000c6 dddd
0000c7 dddd
0000c8 dddd
0000c9 dddd
0000ca dddd
0000cb dddd
0000cc dddd
0000cd dddd
0000ce dddd
0000cf dddd
0000d0 dddd
0000d1 dddd
0000d2 dddd
0000d3 dddd
0000d4 dddd
0000d5 dddd
0000d6 dddd
0000d7 dddd
0000d8 dddd
0000d9 dddd
0000da dddd
0000db dddd
0000dc dddd
0000dd dddd
0000de dddd
0000df dddd
0000e0 dddd
0000e1 dddd
0000e2 dddd
0000e3 dddd
0000e4 dddd
0000e5 dddd
0000e6 dddd
0000e7 dddd
0000e8 dddd
0000e9 dddd
0000ea dddd
0000eb dddd
0000ec dddd
0000ed dddd
0000ee dddd
0000ef dddd
0000f0 dddd
0000f1 dddd
0000f2 dddd
0000f3 dddd
0000f4 dddd
0000f5 dddd
0000f6 dddd
0000f7 dddd
0000f8 dddd
0000f9 dddd
0000fa dddd
0000fb dddd
0000fc dddd
0000fd dddd
0000fe dddd
0000ff dddd
000100 dddd
000101 dddd
000102 dddd
000103 dddd
000104 dddd
000105 dddd
000106 dddd
000107 dddd
000108 dddd
000109 dddd
00010a dddd
00010b dddd
00010c dddd
00010d dddd
00010e dddd
00010f dddd
000110 dddd
000111 dddd
000112 dddd
000113 dddd
000114 dddd
000115 dddd
000116 dddd
000117 dddd
000118 dddd
000119 dddd
00011a dddd
00011b dddd
00011c dddd
00011d dddd
00011e dddd
00011f dddd
000120 dddd
000121 dddd
000122 dddd
000123 dddd
000124 dddd
000125 dddd
000126 dddd
000127 dddd
000128 dddd
000129 dddd
00012a dddd
00012b dddd
00012c dddd
00012d dddd
00012e dddd
00012f dddd
000130 dddd
000131 dddd
000132 dddd
000133 dddd
000134 dddd
000135 dddd
000136 dddd
000137 dddd
000138 dddd
000139 dddd
00013a dddd
00013b dddd
00013c dddd
00013d dddd
00013e dddd
00013f dddd
000140 dddd
000141 dddd
000142 dddd
000143 dddd
000144 dddd
000145 dddd
000146 dddd
000147 dddd
000148 dddd
000149 dddd
00014a dddd
00014b dddd
00014c dddd
00014d dddd
00014e dddd
00014f dddd
000150 dddd
000151 dddd
000152 dddd
000153 dddd
000154 dddd
000155 dddd
000156 dddd
000157 dddd
000158 dddd
000159 dddd
00015a dddd
00015b dddd
00015c dddd
00015d dddd
00015e dddd
00015f dddd
000160 dddd
000161 dddd
000162 dddd
000163 dddd
000164 dddd
000165 dddd
000166 dddd
000167 dddd
000168 dddd
000169 dddd
00016a dddd
00016b dddd
00016c dddd
00016d dddd
00016e dddd
00016f dddd
000170 dddd
000171 dddd
000172 dddd
000173 dddd
000174 dddd
000175 dddd
000176 dddd
000177 dddd
000178 dddd
000179 dddd
00017a dddd
00017b dddd
00017c dddd
00017d dddd
00017e dddd
00017f dddd
000180 dddd
000181 dddd
000182 dddd
000183 dddd
000184 dddd
000185 dddd
000186 dddd
000187 dddd
000188 dddd
000189 dddd
00018a dddd
00018b dddd
00018c dddd
00018d dddd
00018e dddd
00018f dddd
000190 dddd
000191 dddd
000192 dddd
000193 dddd
000194 dddd
000195 dddd
000196 dddd
000197 dddd
000198 dddd
000199 dddd
00019a dddd
00019b dddd
00019c dddd
00019d dddd
00019e dddd
00019f dddd
0001a0 dddd
0001a1 dddd
0001a2 dddd
0001a3 dddd
0001a4 dddd
0001a5 dddd
0001a6 dddd
0001a7 dddd
0001a8 dddd
0001a9 dddd
0001aa dddd
0001ab dddd
0001ac dddd
0001ad dddd
0001ae dddd
0001af dddd
0001b0 dddd
0001b1 dddd
0001b2 dddd
0001b3 dddd
0001b4 dddd
0001b5 dddd
0001b6 dddd
0001b7 dddd
0001b8 dddd
0001b9 dddd
0001ba dddd
0001bb dddd
0001bc dddd
0001bd dddd
0001be dddd
0001bf dddd
0001c0 dddd
0001c1 dddd
0001c2 dddd
0001c3 dddd
0001c4 dddd
0001c5 dddd
0001c6 dddd
0001c7 dddd
0001c8 dddd
0001c9 dddd
0001ca dddd
0001cb dddd
0001cc dddd
0001cd dddd
0001ce dddd
0001cf dddd
0001d0 dddd
0001d1 dddd
0001d2 dddd
0001d3 dddd
0001d4 dddd
0001d5 dddd
0001d6 dddd
0001d7 dddd
0001d8 dddd
0001d9 dddd
0001da dddd
0001db dddd
0001dc dddd
0001dd dddd
0001de dddd
0001df dddd
0001e0 dddd
0001e1 dddd
0001e2 dddd
0001e3 dddd
0001e4 dddd
0001e5 dddd
0001e6 dddd
0001e7 dddd
0001e8 dddd
0001e9 dddd
0001ea dddd
0001eb dddd
0001ec dddd
0001ed dddd
0001ee dddd
0001ef dddd
0001f0 dddd
0001f1 dddd
0001f2 dddd
0001f3 dddd
0001f4 dddd
0001f5 dddd
0001f6 dddd
0001f7 dddd
0001f8 dddd
0001f9 dddd
0001fa dddd
0001fb dddd
0001fc dddd
0001fd dddd
0001fe dddd
0001ff dddd
000200 dddd
000201 dddd
000202 dddd
000203 dddd
000204 dddd
000205 dddd
000206 dddd
000207 dddd
000208 dddd
000209 dddd
00020a dddd
00020b dddd
00020c dddd
00020d dddd
00020e dddd
00020f dddd
000210 dddd
000211 dddd
000212 dddd
000213 dddd
000214 dddd
000215 dddd
000216 dddd
000217 dddd
000218 dddd
000219 dddd
00021a dddd
00021b dddd
00021c dddd
00021d dddd
00021e dddd
00021f dddd
000220 dddd
000221 dddd
000222 dddd
000223 dddd
000224 dddd
000225 dddd
000226 dddd
000227 dddd
000228 dddd
000229 dddd
00022a dddd
00022b dddd
00022c dddd
00022d dddd
00022e dddd
00022f dddd
000230 dddd
000231 dddd
000232 dddd
000233 dddd
000234 dddd
000235 dddd
000236 dddd
000237 dddd
000238 dddd
000239 dddd
00023a dddd
00023b dddd
00023c dddd
00023d dddd
00023e dddd
00023f dddd
000240 dddd
000241 dddd
000242 dddd
000243 dddd
000244 dddd
000245 dddd
000246 dddd
000247 dddd
000248 dddd
000249 dddd
00024a dddd
00024b dddd
00024c dddd
00024d dddd
00024e dddd
00024f dddd
000250 dddd
000251 dddd
000252 dddd
000253 dddd
000254 dddd
000255 dddd
000256 dddd
000257 dddd
000258 dddd
000259 dddd
00025a dddd
00025b dddd
00025c dddd
00025d dddd
00025e dddd
00025f dddd
000260 dddd
000261 dddd
000262 dddd
000263 dddd
000264 dddd
000265 dddd
000266 dddd
000267 dddd
000268 dddd
000269 dddd
00026a dddd
00026b dddd
00026c dddd
00026d dddd
00026e dddd
00026f dddd
000270 dddd
000271 dddd
000272 dddd
000273 dddd
000274 dddd
000275 dddd
000276 dddd
000277 dddd
000278 dddd
000279 dddd
00027a dddd
00027b dddd
00027c dddd
00027d dddd
00027e dddd
00027f dddd
000280 dddd
000281 dddd
000282 dddd
000283 dddd
000284 dddd
000285 dddd
000286 dddd
000287 dddd
000288 dddd
000289 dddd
00028a dddd
00028b dddd
00028c dddd
00028d dddd
00028e dddd
00028f dddd
000290 dddd
000291 dddd
000292 dddd
000293 dddd
000294 dddd
000295 dddd
000296 dddd
000297 dddd
000298 dddd
000299 dddd
00029a dddd
00029b dddd
00029c dddd
00029d dddd
00029e dddd
00029f dddd
0002a0 dddd
0002a1 dddd
0002a2 dddd
0002a3 dddd
0002a4 dddd
0002a5 dddd
0002a6 dddd
0002a7 dddd
0002a8 dddd
0002a9 dddd
0002aa dddd
0002ab dddd
0002ac dddd
0002ad dddd
0002ae dddd
0002af dddd
0002b0 dddd
0002b1 dddd
0002b2 dddd
0002b3 dddd
0002b4 dddd
0002b5 dddd
0002b6 dddd
0002b7 dddd
0002b8 dddd
0002b9 dddd
0002ba dddd
0002bb dddd
0002bc dddd
0002bd dddd
0002be dddd
0002bf dddd
0002c0 dddd
0002c1 dddd
0002c2 dddd
0002c3 dddd
0002c4 dddd
0002c5 dddd
0002c6 dddd
0002c7 dddd
0002c8 dddd
0002c9 dddd
0002ca dddd
0002cb dddd
0002cc dddd
0002cd dddd
0002ce dddd
0002cf dddd
0002d0 dddd
0002d1 dddd
0002d2 dddd
0002d3 dddd
0002d4 dddd
0002d5 dddd
0002d6 dddd
0002d7 dddd
0002d8 dddd
0002d9 dddd
0002da dddd
0002db dddd
0002dc dddd
0002dd dddd
0002de dddd
0002df dddd
0002e0 dddd
0002e1 dddd
0002e2 dddd
0002e3 dddd
0002e4 dddd
0002e5 dddd
0002e6 dddd
0002e7 dddd
0002e8 dddd
0002e9 dddd
0002ea dddd
0002eb dddd
0002ec dddd
0002ed dddd
0002ee dddd
0002ef dddd
0002f0 dddd
0002f1 dddd
0002f2 dddd
0002f3 dddd
0002f4 dddd
0002f5 dddd
0002f6 dddd
0002f7 dddd
0002f8 dddd
0002f9 dddd
0002fa dddd
0002fb dddd
0002fc dddd
0002fd dddd
0002fe dddd
0002ff dddd
000300 dddd
000301 dddd
000302 dddd
000303 dddd
000304 dddd
000305 dddd
000306 dddd
000307 dddd
000308 dddd
000309 dddd
00030a dddd
00030b dddd
00030c dddd
00030d dddd
00030e dddd
00030f dddd
000310 dddd
000311 dddd
000312 dddd
000313 dddd
000314 dddd
000315 dddd
000316 dddd
000317 dddd
000318 dddd
000319 dddd
00031a dddd
00031b dddd
00031c dddd
00031d dddd
00031e dddd
00031f dddd
000320 dddd
000321 dddd
000322 dddd
000323 dddd
000324 dddd
000325 dddd
000326 dddd
000327 dddd
000328 dddd
000329 dddd
00032a dddd
00032b dddd
00032c dddd
00032d dddd
00032e dddd
00032f dddd
000330 dddd
000331 dddd
000332 dddd
000333 dddd
000334 dddd
000335 dddd
000336 dddd
000337 dddd
000338 dddd
000339 dddd
00033a dddd
00033b dddd
00033c dddd
00033d dddd
00033e dddd
00033f dddd
000340 dddd
000341 dddd
000342 dddd
000343 dddd
000344 dddd
000345 dddd
000346 dddd
000347 dddd
000348 dddd
000349 dddd
00034a dddd
00034b dddd
00034c dddd
00034d dddd
00034e dddd
00034f dddd
000350 dddd
000351 dddd
000352 dddd
000353 dddd
000354 dddd
000355 dddd
000356 dddd
000357 dddd
000358 dddd
000359 dddd
00035a dddd
00035b dddd
00035c dddd
00035d dddd
00035e dddd
00035f dddd
000360 dddd
000361 dddd
000362 dddd
000363 dddd
000364 dddd
000365 dddd
000366 dddd
000367 dddd
000368 dddd
000369 dddd
00036a dddd
00036b dddd
00036c dddd
00036d dddd
00036e dddd
00036f dddd
000370 dddd
000371 dddd
000372 dddd
000373 dddd
000374 dddd
000375 dddd
000376 dddd
000377 dddd
000378 dddd
000379 dddd
00037a dddd
00037b dddd
00037c dddd
00037d dddd
00037e dddd
00037f dddd
000380 dddd
000381 dddd
000382 dddd
000383 dddd
000384 dddd
000385 dddd
000386 dddd
000387 dddd
000388 dddd
000389 dddd
00038a dddd
00038b dddd
00038c dddd
00038d dddd
00038e dddd
00038f dddd
000390 dddd
000391 dddd
000392 dddd
000393 dddd
000394 dddd
000395 dddd
000396 dddd
000397 dddd
000398 dddd
000399 dddd
00039a dddd
00039b dddd
00039c dddd
00039d dddd
00039e dddd
00039f dddd
0003a0 dddd
0003a1 dddd
0003a2 dddd
0003a3 dddd
0003a4 dddd
0003a5 dddd
0003a6 dddd
0003a7 dddd
0003a8 dddd
0003a9 dddd
0003aa dddd
0003ab dddd
0003ac dddd
0003ad dddd
0003ae dddd
0003af dddd
0003b0 dddd
0003b1 dddd
0003b2 dddd
0003b3 dddd
0003b4 dddd
0003b5 dddd
0003b6 dddd
0003b7 dddd
0003b8 dddd
0003b9 dddd
0003ba dddd
0003bb dddd
0003bc dddd
0003bd dddd
0003be dddd
0003bf dddd
0003c0 dddd
0003c1 dddd
0003c2 dddd
0003c3 dddd
0003c4 dddd
0003c5 dddd
0003c6 dddd
0003c7 dddd
0003c8 dddd
0003c9 dddd
0003ca dddd
0003cb dddd
0003cc dddd
0003cd dddd
0003ce dddd
0003cf dddd
0003d0 dddd
0003d1 dddd
0003d2 dddd
0003d3 dddd
0003d4 dddd
0003d5 dddd
0003d6 dddd
0003d7 dddd
0003d8 dddd
0003d9 dddd
0003da dddd
0003db dddd
0003dc dddd
0003dd dddd
0003de dddd
0003df dddd
0003e0 dddd
0003e1 dddd
0003e2 dddd
0003e3 dddd
0003e4 dddd
0003e5 dddd
0003e6 dddd
0003e7 dddd
0003e8 dddd
0003e9 dddd
0003ea dddd
0003eb dddd
0003ec dddd
0003ed dddd
0003ee dddd
0003ef dddd
0003f0 dddd
0003f1 dddd
0003f2 dddd
0003f3 dddd
0003f4 dddd
0003f5 dddd
0003f6 dddd
0003f7 dddd
0003f8 dddd
0003f9 dddd
0003fa dddd
0003fb dddd
0003fc dddd
0003fd dddd
0003fe dddd
0003ff dddd
000400 dddd
000401 dddd
000402 dddd
000403 dddd
000404 dddd
000405 dddd
000406 dddd
000407 dddd
000408 dddd
000409 dddd
00040a dddd                      	     .DB 0xA9, 0x09, 0xDA, 0xDB, 0xDC, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,                                  0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD                                 , 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0x00040b b1b0
00040c b3b2
00040d b5b4
00040e b7b6
00040f b9b8
000410 bbba                      DD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,                                  0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD                                 , 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0x000100                           DD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,                                  0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD                                 , 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0x                                 DD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,                                  0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD000000 ee
000001 ee
000002 ee                        , 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0x                                 DD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,                                  0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD                                 .include "definitions.asm"
                                 
                                  * definitions.asm
                                  *
                                  *  Created: 5/12/2018 9:29:05 PM
                                  *   Author: ROTP
                                  */ 
                                 
                                  .DEF AR = R0
                                  .DEF XR = R1
                                  .DEF YR = R2
                                 .include "dereferencer.asm"
                                 
                                  * dereferencer.asm
                                  *
                                  *  Created: 5/13/2018 12:35:43 AM
                                  *   Author: ROTP
                                  */ 
                                 
                                  
                                 .MACRO dereferencer
                                 	;328p memory starts at 0x0100 and goes up to 0x8ff. 
                                 	;6502 memory starts at 0x0000.
                                 	
                                 	;Hence, all memory addresses referenced will have to be less than 0x07ff (6502 address),
                                 	;because we will have to add 100 to it. 
                                 
                                 	;previous RAM only code:
                                 	;ldi r16, HIGH(SRAM_START)
                                 	;adc ZH, r16
                                 	;
                                 	;ld AR, Z+
                                 	;
                                 	;sbc ZH, r16
                                 	
                                 
                                 
                                 dereferencer_SRAM_load:
                                 	; IF ZH <= HIGH SRAM_END_EMU then RAM
                                 	;	ZH += HIGH(SRAM_START)
                                 	;   load data into reg
                                 	;   ZH -= HIGH(SRAM_START)
                                 	CPI ZH, HIGH(SRAM_END_EMU)+1
                                 	BRGE dereferencer_ROM_load
                                 
                                 	LDI r16, HIGH(SRAM_START)
                                 
                                 	;ADIW ZH, HIGH(SRAM_START)
                                 	ADD ZH, r16
                                 	
                                 	LD @0, Z+
                                 
                                 	;SBIW ZH, HIGH(SRAM_START)
                                 	SUB ZH, r16
                                 	
                                 	;RET 
                                 	JMP dereferencer_return
                                 
                                 dereferencer_ROM_load:
                                 	; IF ZH <= ROM_END then ROM
                                 	;	ZH -= HIGH(ROM_START_EMU)
                                 	;   load data into reg from ROM data
                                 	;   ZH += HIGH(ROM_START_EMU)
                                 	CPI ZH, HIGH(ROM_END_EMU)+1 ;0x0801
                                 	BRGE dereferencer_EEPROM_load
                                 
                                 	LDI r16, HIGH(ROM_START_EMU)
                                 	LDI r17, LOW(ROMcode)
                                 	LDI r18, HIGH(ROMcode)
                                 	SUB ZH, r16 ;0802 => 0002
                                 
                                 	;Z now has the proper index of the data we want from our large ROM "array". We need to add the array ptr to Z now and then multiply by two
                                 	ADD ZL, r17 
                                 	ADC ZH, r18 ;2 + 16
                                 	LSL ZL ; 
                                 	ROL ZH ; 
                                 
                                 	LPM @0, Z ;0x0818
                                 
                                 	; Z is no longer in proper PC, so set it back to proper PC format. 
                                 	; TODO: replace this code with a swap routine? no clue which is faster (yet.)
                                 	LSR ZH
                                 	ASR ZL
                                 	ADD ZH, r16
                                 	SUB ZH, R18
                                 	SBC ZL, R17
                                 	
                                 	;WANT 0x0801
                                 
                                 	;RET
                                 	JMP dereferencer_return
                                 
                                 dereferencer_EEPROM_load:
                                 	; IF ZH <= EEPROM_END then EEPROM
                                 	;	ZH -= HIGH(EEPROM_START_EMU)
                                 	;   load data into reg from EEPROM data
                                 	;   ZH += HIGH(EEPROM_START_EMU
                                 	; IF ZH > EEPROM_END then CRASH
                                 	CPI ZH, HIGH(EEPROM_END_EMU)+1
                                 	BRGE BREAK_load
                                 
                                 	BREAK
                                 
                                 dereferencer_BREAK_load:
                                 	BREAK
                                 
                                 	;RET
                                 	JMP dereferencer_return
                                 
                                 dereferencer_return:
                                 .ENDMACRO
                                 .include "Instructions/LDA.asm"
                                 
                                  * LDA.asm
                                  *
                                  *  Created: 5/12/2018 9:14:03 PM
                                  *   Author: ROTP
                                  */ 
                                 
                                 
                                  dereferencePCtoA:
                                 	;328p memory starts at 0x0100 and goes up to 0x8ff. 
                                 	;6502 memory starts at 0x0000.
                                 	
                                 	;Hence, all memory addresses referenced will have to be less than 0x07ff (6502 address),
                                 	;because we will have to add 100 to it. 
                                 
                                 	;previous RAM only code:
                                 	;ldi r16, HIGH(SRAM_START)
                                 	;adc ZH, r16
                                 	;
                                 	;ld AR, Z+
                                 	;
                                 	;sbc ZH, r16
                                 	
                                 
                                 
                                 SRAM_load:
                                 	; IF ZH <= HIGH SRAM_END_EMU then RAM
                                 	;	ZH += HIGH(SRAM_START)
                                 	;   load data into reg
                                 	;   ZH -= HIGH(SRAM_START)
000411 30f8                      	CPI ZH, HIGH(SRAM_END_EMU)+1
000412 f42c                      	BRGE ROM_load
                                 
000413 e001                      	LDI r16, HIGH(SRAM_START)
                                 
                                 	;ADIW ZH, HIGH(SRAM_START)
000414 0ff0                      	ADD ZH, r16
                                 	
000415 9001                      	LD AR, Z+
                                 
                                 	;SBIW ZH, HIGH(SRAM_START)
000416 1bf0                      	SUB ZH, r16
                                 	
000417 9508                      	RET 
                                 
                                 ROM_load:
                                 	; IF ZH <= ROM_END then ROM
                                 	;	ZH -= HIGH(ROM_START_EMU)
                                 	;   load data into reg from ROM data
                                 	;   ZH += HIGH(ROM_START_EMU)
000418 31f0                      	CPI ZH, HIGH(ROM_END_EMU)+1 ;0x0801
000419 f47c                      	BRGE EEPROM_load
                                 
00041a e008                      	LDI r16, HIGH(ROM_START_EMU)
00041b e01b                      	LDI r17, LOW(ROMcode)
00041c e024                      	LDI r18, HIGH(ROMcode)
00041d 1bf0                      	SUB ZH, r16
                                 
                                 	;Z now has the proper index of the data we want from our large ROM "array". We need to add the array ptr to Z now and then multiply by two
00041e 0fe1                      	ADD ZL, r17
00041f 1ff2                      	ADC ZH, r18
000420 0fee                      	LSL ZL
000421 1fff                      	ROL ZH
                                 
000422 9004                      	LPM AR, Z ;0x0818
                                 
                                 	; Z is no longer in proper PC, so set it back to proper PC format. 
                                 	; TODO: replace this code with a swap routine? no clue which is faster (yet.)
000423 95f6                      	LSR ZH
000424 95e5                      	ASR ZL
000425 0ff0                      	ADD ZH, r16
000426 1bf2                      	SUB ZH, R18
000427 0be1                      	SBC ZL, R17
                                 	
                                 	;WANT 0x0801
                                 
000428 9508                      	RET
                                 
                                 EEPROM_load:
                                 	; IF ZH <= EEPROM_END then EEPROM
                                 	;	ZH -= HIGH(EEPROM_START_EMU)
                                 	;   load data into reg from EEPROM data
                                 	;   ZH += HIGH(EEPROM_START_EMU
                                 	; IF ZH > EEPROM_END then CRASH
000429 31f4                      	CPI ZH, HIGH(EEPROM_END_EMU)+1
00042a f40c                      	BRGE BREAK_load
                                 
00042b 9598                      	BREAK
                                 
                                 BREAK_load:
00042c 9598                      	BREAK
                                 
00042d 9508                      	RET
                                 
                                  LDA_immediate: ;LDA #$09 => A9 09
00042e 9631                      	ADIW ZH:ZL, 1 ;grab the next byte 
                                 
                                 	;CALL dereferencePCtoA ;todo; use a macro here. 
00042f 30f8
000430 f434
000431 e001
000432 0ff0
000433 9001
000434 1bf0
000435 940c 044f
000437 31f0
000438 f484
000439 e008
00043a e01b
00043b e024
00043c 1bf0
00043d 0fe1
00043e 1ff2
00043f 0fee
000440 1fff
000441 9004
000442 95f6
000443 95e5
000444 0ff0
000445 1bf2
000446 0be1
000447 940c 044f
000449 31f4
00044a f70c
00044b 9598
00044c 9598
00044d 940c 044f                 	dereferencer AR
                                 	
00044f 9631                      	ADIW ZH:ZL, 1
                                 
                                 .include "memorymap.asm"
000450 9508                      
                                  * memorymap.asm
                                  *
                                  *  Created: 5/12/2018 7:26:24 PM
                                  *   Author: ROTP
                                  */ 
                                 
                                  ; To access SRAM, a offset of (6502 memory address) - SRAM_START will have to be applied. 
                                 
                                 ; .EQU SRAM_START = 0x0100 
                                  .EQU SRAM_END   = 0x08FF
                                 
                                  .EQU SRAM_START_EMU = 0x0000
                                  .EQU SRAM_END_EMU = 0x07FF
                                 
                                 
                                  ; To access ROM, a offset of (6502 memory address) - ROM_START will have to be applied. 
                                  .EQU ROM_START_EMU = 0x0800
                                  .EQU ROM_END_EMU   = 0x0FFF
                                 
                                 
                                  ; To access EEPROM, a offset of (6502 memory address) - EEPROM_START will have to be applied. 
                                  ; EEPROM is checked last, so it is technically the least performant memory type. 
                                 
                                  .EQU EEPROM_START_EMU = 0x1000
                                  .EQU EEPROM_END_EMU   = 0x13FF 
                                 
                                 init:
                                 	; TODO: Copy RAMcode to SRAM
000451 e0f0                      	ldi ZH, HIGH(RAMcodeUNLOADED)
000452 e0eb                      	ldi ZL, LOW(RAMcodeUNLOADED)
                                 
000453 e0b1                      	ldi XH, HIGH(SRAM_START)
000454 e0a0                      	ldi XL, LOW(SRAM_START)
                                 
000455 e0d8                      	ldi YH, HIGH(SRAM_END)
000456 efcf                      	ldi YL, LOW(SRAM_END)
                                 
000457 0fee                      	LSL ZL
000458 1fff                      	ROL ZH
                                 
                                 ram_copy_loop:
000459 9005                      	lpm r0, Z+
00045a 920d                      	st X+, r0
                                 
00045b 17bd                      	cp XH, YH
00045c f7e1                      	brne ram_copy_loop
00045d 17ac                      	cp XL, YL
00045e f7d1                      	brne ram_copy_loop
                                 
                                 ram_copy_done:
                                 
                                 
00045f 940c 0461                 	jmp _start
                                 
                                 _start:
000461 2400                      	clr AR ; clear A register
000462 2411                      	clr XR ; clear X register
000463 2422                      	clr YR ; clear Y register
000464 27ff                      	clr ZH ; clear PC HIGH register
000465 27ee                      	clr ZL ; clear PC LOW register
                                 
                                 	; 1. Fetch instruction from PC
                                 	; 2. Decode instruction
                                 	; 3. Execute instruction (updating PC if necessary.)
                                 	;    a. Ensure mappings are correct. 
                                 	; 4. Come back here to execute the next instruction. 
                                 
                                 ;    inc r1
                                 ;	sts instructionTable, r1
                                 	
                                 
                                 
                                 fetch_setup:
                                 
                                 fetch:
                                 	
                                 
                                 	;call LDA_immediate
                                 
000466 e0f8                      	LDI ZH, HIGH(ROM_START_EMU)
000467 940e 042e                 	call LDA_immediate
                                 	;dereferencer AR
                                 
000469 cffc                          rjmp fetch


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   1 y  :   0 z  :   5 r0 :   7 r1 :   1 r2 :   1 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  12 r17:   6 r18:   6 r19:   0 r20:   0 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   2 r27:   2 r28:   2 
r29:   2 r30:  13 r31:  28 
Registers used: 14 out of 35 (40.0%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   6 adiw  :   2 and   :   0 
andi  :   0 asr   :   2 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   4 breq  :   0 brge  :   6 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   1 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   5 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :   6 cpse  :   0 dec   :   0 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   0 jmp   :   5 
ld    :   2 ldd   :   0 ldi   :  15 lds   :   0 lpm   :   5 lsl   :   3 
lsr   :   2 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   0 pop   :   0 
push  :   0 rcall :   0 ret   :   4 reti  :   0 rjmp  :   1 rol   :   3 
ror   :   0 sbc   :   2 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   1 std   :   0 sts   :   0 
sub   :   6 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 23 out of 113 (20.4%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008d4    182   2078   2260   32768   6.9%
[.dseg] 0x000100 0x000900      0   2048   2048    2048 100.0%
[.eseg] 0x000000 0x000003      0      3      3    1024   0.3%

Assembly complete, 0 errors, 1 warnings
